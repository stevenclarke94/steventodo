{"version":3,"sources":["postsFile.jsx","App.js","serviceWorker.js","index.js"],"names":["Posts","text","postData","id","setPostData","filterstate","setFilterState","useState","status","setStatus","className","onClick","console","log","currentId","filter","object","completedId","map","complete","App","inputText","setInputText","onSubmit","e","preventDefault","Math","random","value","onChange","target","type","for","name","postObject","key","completed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAuCeA,G,OAlCD,SAAC,GAAmE,IAAlEC,EAAiE,EAAjEA,KAAMC,EAA2D,EAA3DA,SAASC,EAAkD,EAAlDA,GAAIC,EAA8C,EAA9CA,YAA8C,KAAjCC,YAAiC,EAApBC,eAC7BC,mBAAS,KADwC,mBACtEC,EADsE,KAC9DC,EAD8D,KAyB7E,OACI,6BACI,wBAAIC,UAAWF,GAASP,GACxB,4BAAQU,QAvBhB,WACIC,QAAQC,IAAI,CAACV,OACb,IAAIW,EAAYX,EAChBC,EAAYF,EAASa,QAAO,SAAAC,GAAM,OAAIA,EAAOb,KAAOW,QAoBhD,UACA,4BAAQH,QAlBhB,WACI,IAAIM,EAAcd,EAClBD,EAASgB,KAAI,SAACF,IAAmC,IAApBA,EAAOG,SAAmBV,EAAU,QAAaA,EAAU,YACxFL,EAAYF,EAASgB,KAAI,SAACF,GAAa,OAAIA,EAAOb,KAAOc,EAC9C,2BACAD,GADP,IACeG,UAAWH,EAAOG,WAGrB,eAAIH,SAUhB,gBCqBGI,MAlDf,WAAgB,IAAD,EAEqBb,qBAFrB,mBAENc,EAFM,KAEKC,EAFL,OAGmBf,mBAAS,IAH5B,mBAGNL,EAHM,KAGIE,EAHJ,OAIyBG,mBAAS,IAJlC,mBAsBb,OAtBa,UAuBX,yBAAKG,UAAU,OACf,2CACA,0BAAMa,SAfV,SAAoBC,GAClBA,EAAEC,iBACFrB,EAAY,GAAD,mBAAKF,GAAL,CAAe,CAACC,GAAoB,IAAhBuB,KAAKC,SAAiB1B,KAAKoB,EAAWF,UAAU,MAC/EG,EAAa,IACbV,QAAQC,IAAIX,KAYV,2BAAO0B,MAAOP,EAAWQ,SApB7B,SAAkBL,GAChBF,EAAaE,EAAEM,OAAOF,OACtBhB,QAAQC,IAAIQ,IAkBmCU,KAAK,SAClD,8CAEA,6BACA,2BAAOC,IAAI,YACf,4BAAQH,SAdR,SAAuBL,GACrBZ,QAAQC,IAAIW,EAAEM,OAAOF,QAaUzB,GAAG,SAAS8B,KAAK,WAChD,4BAAQL,MAAM,OAAd,OACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,gBAIG1B,EAASgB,KAAI,SAAAgB,GAAU,OAAK,kBAAC,EAAD,CAC7BhC,SAAUA,EACVE,YAAaA,EACZ+B,IAAKD,EAAW/B,GAChBA,GAAM+B,EAAW/B,GACjBF,KAAMiC,EAAWjC,KACjBkB,SAAUe,EAAWE,UACrB5B,OAAQ0B,EAAW1B,cCtCJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.1c2a188f.chunk.js","sourcesContent":["import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport './App.css';\r\n\r\nconst Posts = ({text, postData,id, setPostData, filterstate, setFilterState}) => {\r\n    const [status, setStatus] = useState(\"\");\r\n\r\n    \r\n\r\n    function deleteData () {\r\n        console.log({id});\r\n        var currentId = id;\r\n        setPostData(postData.filter(object => object.id !== currentId))\r\n\r\n    }\r\n    function completed () {\r\n        var completedId = id;\r\n        postData.map((object) =>{if (object.complete !== true){setStatus(\"true\")}else{setStatus(\"false\")} })        \r\n        setPostData(postData.map((object) => { if (object.id === completedId){            \r\n            return {\r\n                ...object, complete: !object.complete}\r\n               }             \r\n                else                 \r\n                {return {...object}}                                \r\n        }))        \r\n        }              \r\n        \r\n\r\n    \r\n    return(\r\n        <div>\r\n            <h3 className={status}>{text}</h3>\r\n            <button onClick={deleteData}>Delete</button>\r\n            <button onClick={completed}>Completed</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Posts;","import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport Posts from './postsFile';\n\nfunction App() {\n\n  const [inputText, setInputText] = useState();\n  const [postData, setPostData] = useState([]);\n  const [filterstate, setFilterState] = useState(\"\")\n\nfunction textData(e) {\n  setInputText(e.target.value)\n  console.log(inputText);\n}\nfunction submitPost(e){\n  e.preventDefault();\n  setPostData([...postData, {id: Math.random() * 1000, text:inputText, complete: false}]);\n  setInputText('');\n  console.log(postData);\n}\n\nfunction filterChecker(e) {\n  console.log(e.target.value)\n}\n\n\n  return (\n    <div className=\"App\">\n    <h1>Hello World</h1>\n    <form onSubmit={submitPost}>\n    <input value={inputText} onChange={textData} type=\"text\"/>    \n    <button>Todo Post</button>\n    </form>\n    <div>\n    <label for=\"options\"></label>\n<select onChange={filterChecker} id=\"filter\" name=\"options\">\n  <option value=\"All\">All</option>\n  <option value=\"Complete\">Complete</option>\n  <option value=\"Incomplete\">Incomplete</option>\n</select>\n</div>\n\n    {postData.map(postObject => (<Posts\n    postData={postData}\n    setPostData={setPostData}\n     key={postObject.id} \n     id = {postObject.id}\n     text={postObject.text}\n     complete={postObject.completed}\n     status={postObject.status}/>))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}